{"version":3,"sources":["store.tsx","hooks/useLocalStorage.ts","components/Docs.tsx","components/Settings.tsx","components/Filters.tsx","hooks/useChannels.ts","errors/OptOutError.ts","services/isUserId.ts","icons/Txt.tsx","hooks/useLog.ts","hooks/useThirdPartyEmotes.ts","hooks/useBttvChannelEmotes.ts","hooks/useFfzChannelEmotes.ts","hooks/use7tvChannelEmotes.ts","hooks/useBttvGlobalEmotes.ts","hooks/useFfzGlobalEmotes.ts","hooks/use7tvGlobalEmotes.ts","components/Message.tsx","components/User.tsx","components/LogLine.tsx","components/ContentLog.tsx","components/TwitchChatLogLine.tsx","components/TwitchChatLogContainer.tsx","components/Log.tsx","components/OptOutMessage.tsx","components/LogContainer.tsx","hooks/useAvailableLogs.ts","components/Page.tsx","index.tsx"],"names":["LocalStorageSettings","url","URL","window","location","href","defaultContext","state","queryClient","QueryClient","apiBaseUrl","process","REACT_APP_API_BASE_URL","protocol","host","settings","showEmotes","displayName","value","showName","showTimestamp","twitchChatMode","newOnBottom","currentChannel","searchParams","get","currentUsername","showSwagger","has","error","setState","setCurrents","setSettings","newSettings","setShowSwagger","show","store","createContext","Provider","StateProvider","children","key","initialValue","useState","item","localStorage","getItem","JSON","parse","console","log","setValue","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","returnValue","useLocalStorage","setSettingsStorage","Object","keys","removeQueries","toLowerCase","trim","set","history","replaceState","toString","delete","QueryDefaults","staleTime","DocsWrapper","styled","div","Docs","useContext","IconButton","onClick","size","color","Swagger","SwaggerWrapper","baseUrl","ReactDOM","createPortal","style","display","requestInterceptor","req","includes","port","document","body","SettingsContainer","Settings","anchorEl","setAnchorEl","menuItems","name","setting","push","MenuItem","newSetting","toggleSetting","Check","Clear","entries","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","FiltersContainer","form","FiltersWrapper","Filters","useQueryClient","channels","useQuery","queryUrl","fetch","then","response","ok","Error","statusText","json","data","refetchOnWindowFocus","refetchOnReconnect","useChannels","onSubmit","e","preventDefault","target","HTMLFormElement","FormData","channel","username","invalidateQueries","action","Autocomplete","options","map","width","defaultValue","getOptionLabel","clearOnBlur","renderInput","params","TextField","label","variant","autoFocus","autoComplete","Button","type","OptOutError","isUserId","startsWith","getUserId","replace","Txt","className","height","viewBox","d","fill","fillRule","useLog","year","month","channelIsId","usernameIsId","append","messages","msg","timestamp","Date","emotes","parseEmotes","text","tags","messageText","parsed","groups","split","positionGroups","startPos","endPos","startIndex","Number","endIndex","code","runes","substr","useThirdPartyEmotes","channelId","thirdPartyEmotes","Promise","resolve","sharedEmotes","channelEmotes","res","isLoading","channelEmote","urls","small","medium","big","useBttvChannelEmotes","sets","values","emoticons","String","useFfzChannelEmotes","reject","use7tvChannelEmotes","useBttvGlobalEmotes","useFfzGlobalEmotes","use7tvGlobalEmotes","MessageContainer","Emote","img","Message","replaced","message","renderMessage","buffer","renderMessagePrefix","messageTextEmoji","x","length","c","emote","alt","src","emoteFound","componentDecorator","decoratedHref","decoratedText","UserContainer","attrs","props","User","renderColor","dayjs","extend","utc","timezone","tz","guess","LogLineContainer","li","LogLine","LogLineWithEmotes","format","ContentLogContainer","ul","ContentLog","searchText","setSearchText","logs","filter","search","useRef","useEffect","activeSearchField","current","onMouseEnter","inputRef","onChange","InputProps","startAdornment","InputAdornment","position","Search","itemCount","itemSize","index","TwitchChatLogLineContainer","TwitchChatLogLine","TwitchChatContentLog","LogContainer","Log","initialLoad","load","setLoad","LoadableLog","onLoad","txtHref","rel","LoadableLogContainer","OptOutContainer","OptOutMessage","LogContainerDiv","ctrlKey","navigator","platform","toUpperCase","indexOf","listener","focus","addEventListener","removeEventListener","undefined","status","availableLogs","catch","err","useAvailableLogs","PageContainer","Page","pageTheme","createMuiTheme","palette","App","QueryClientProvider","client","render","StrictMode","ThemeProvider","theme","getElementById"],"mappings":"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","file":"static/js/main.e48bf564.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\nimport { QueryClient } from 'react-query'\nimport { useLocalStorage } from \"./hooks/useLocalStorage\";\n\nexport interface Settings {\n    showEmotes: Setting,\n    showName: Setting,\n    showTimestamp: Setting,\n    twitchChatMode: Setting,\n    newOnBottom: Setting,\n}\n\nexport enum LocalStorageSettings {\n    showEmotes,\n    showName,\n    showTimestamp,\n    twitchChatMode,\n    newOnBottom,\n}\n\nexport interface Setting {\n    displayName: string,\n    value: boolean,\n}\n\nexport interface State {\n    settings: Settings,\n    queryClient: QueryClient,\n    apiBaseUrl: string,\n    currentChannel: string | null,\n    currentUsername: string | null,\n    error: boolean,\n    activeSearchField: HTMLInputElement | null,\n    showSwagger: boolean,\n}\n\nexport type Action = Record<string, unknown>;\n\nconst url = new URL(window.location.href);\nconst defaultContext = {\n    state: {\n        queryClient: new QueryClient(),\n        apiBaseUrl: process.env.REACT_APP_API_BASE_URL ?? window.location.protocol + \"//\" + window.location.host === \"http://localhost:3000\" ? \"http://localhost:8025\" : window.location.protocol + \"//\" + window.location.host,\n        // apiBaseUrl: process.env.REACT_APP_API_BASE_URL ?? window.location.protocol + \"//\" + window.location.host,\n        // apiBaseUrl: process.env.REACT_APP_API_BASE_URL ?? 'http://localhost:8025',\n        settings: {\n            showEmotes: {\n                displayName: \"Show Emotes\",\n                value: true,\n            },\n            showName: {\n                displayName: \"Show Name\",\n                value: true,\n            },\n            showTimestamp: {\n                displayName: \"Show Timestamp\",\n                value: true,\n            },\n            twitchChatMode: {\n                displayName: \"Twitch Chat Mode\",\n                value: false,\n            },\n            newOnBottom: {\n                displayName: \"Newest messages on bottom\",\n                value: false,\n            },\n        },\n        currentChannel: url.searchParams.get(\"channel\"),\n        currentUsername: url.searchParams.get(\"username\"),\n        showSwagger: url.searchParams.has(\"swagger\"),\n        error: false,\n    } as State,\n    setState: (state: State) => { },\n    setCurrents: (currentChannel: string | null = null, currentUsername: string | null = null) => { },\n    setSettings: (newSettings: Settings) => { },\n    setShowSwagger: (show: boolean) => { },\n};\n\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n\n    const [settings, setSettingsStorage] = useLocalStorage(\"justlog:settings\", defaultContext.state.settings);\n    const [state, setState] = useState({ ...defaultContext.state, settings });\n\n    const setShowSwagger = (show: boolean) => {\n        const url = new URL(window.location.href);\n\n        if (show) {\n            url.searchParams.set(\"swagger\", \"\")\n        } else {\n            url.searchParams.delete(\"swagger\");\n        }\n\n        window.history.replaceState({}, \"justlog\", url.toString());\n\n        setState({ ...state, showSwagger: show })\n    }\n\n    const setSettings = (newSettings: Settings) => {\n        for (const key of Object.keys(newSettings)) {\n            if (typeof (defaultContext.state.settings as unknown as Record<string, Setting>)[key] === \"undefined\") {\n                delete (newSettings as unknown as Record<string, Setting>)[key];\n            }\n        }\n\n        state.queryClient.removeQueries(\"log\");\n\n        setSettingsStorage(newSettings);\n        setState({ ...state, settings: newSettings });\n    }\n\n    const setCurrents = (currentChannel: string | null = null, currentUsername: string | null = null) => {\n        currentChannel = currentChannel?.toLowerCase().trim() ?? null;\n        currentUsername = currentUsername?.toLowerCase().trim() ?? null;\n\n        setState({ ...state, currentChannel, currentUsername, error: false });\n\n        const url = new URL(window.location.href);\n        if (currentChannel) {\n            url.searchParams.set(\"channel\", currentChannel);\n        }\n        if (currentUsername) {\n            url.searchParams.set(\"username\", currentUsername);\n        }\n\n        window.history.replaceState({}, \"justlog\", url.toString());\n    }\n\n    return <Provider value={{ state, setState, setSettings, setCurrents, setShowSwagger }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n\nexport const QueryDefaults = {\n    staleTime: 5 * 10 * 1000,\n};","import { useState } from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n\t// State to store our value\n\t// Pass initial state function to useState so logic is only executed once\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\t// Get from local storage by key\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\t// Parse stored json or if none return initialValue\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\t// If error also return initialValue\n\t\t\tconsole.log(error);\n\t\t\tsetValue(initialValue);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\t// Return a wrapped version of useState's setter function that ...\n\t// ... persists the new value to localStorage.\n\tconst setValue = (value: T): void => {\n\t\ttry {\n\t\t\t// Allow value to be a function so we have same API as useState\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\t// Save state\n\t\t\tsetStoredValue(valueToStore);\n\t\t\t// Save to local storage\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t} catch (error) {\n\t\t\t// A more advanced implementation would handle the error case\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tlet returnValue = storedValue;\n\tif (typeof initialValue === \"object\") {\n\t\treturnValue = { ...initialValue, ...storedValue };\n\t}\n\n\treturn [returnValue, setValue];\n}","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { IconButton } from \"@material-ui/core\";\nimport SwaggerUI from \"swagger-ui-react\"\nimport \"swagger-ui-react/swagger-ui.css\"\nimport ReactDOM from \"react-dom\";\nimport { store } from \"../store\";\n\nconst DocsWrapper = styled.div`\n\n`;\n\nexport function Docs() {\n    const { state, setShowSwagger } = useContext(store);\n\n    const handleClick = () => {\n        setShowSwagger(!state.showSwagger);\n    }\n\n    return <DocsWrapper>\n        <IconButton aria-controls=\"docs\" aria-haspopup=\"true\" onClick={handleClick} size=\"small\" color={state.showSwagger ? \"primary\" : \"default\"}>\n            <DescriptionIcon />\n        </IconButton>\n        <Swagger show={state.showSwagger} />\n    </DocsWrapper>;\n}\n\nconst SwaggerWrapper = styled.div`\n    position: absolute;\n    top: 0;\n    background: var(--bg);\n    left: 0;\n    right: 0;\n    margin-top: 90px;\n    z-index: 999;\n    padding-bottom: 90px;\n\n    .swagger-ui {\n        background: var(--bg);\n        \n        .scheme-container {\n            background: var(--bg-bright);\n        }\n    }\n`;\n\ninterface SwaggerRequest {\n    [k: string]: any;\n}\n\nfunction Swagger({ show }: { show: boolean }) {\n    const { state } = useContext(store);\n    const baseUrl = new URL(state.apiBaseUrl);\n\n    const requestInterceptor = (req: SwaggerRequest): SwaggerRequest => {\n        if (req.url.includes(\"swagger.json\")) {\n            return req;\n        }\n\n        const url = new URL(req.url);\n\n        url.host = baseUrl.host;\n        url.protocol = baseUrl.protocol;\n        url.port = baseUrl.port;\n\n        req.url = url.toString();\n\n        return req;\n    }\n\n    return ReactDOM.createPortal(\n        <SwaggerWrapper style={{ display: show ? \"block\" : \"none\" }}>\n            <SwaggerUI url=\"/swagger.json\" requestInterceptor={requestInterceptor} />\n        </SwaggerWrapper>,\n        document.body\n    );\n}","import { IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport { Check, Clear, Settings as SettingsIcon } from \"@material-ui/icons\";\nimport React, { MouseEvent, useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Setting, store } from \"../store\";\n\nconst SettingsContainer = styled.div`\n\t\n`;\n\nexport function Settings() {\n\tconst { state, setSettings } = useContext(store);\n\tconst [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n\tconst handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handleClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\tconst toggleSetting = (name: string, setting: Setting) => {\n\t\tconst newSetting = { ...setting, value: !setting.value };\n\n\t\tsetSettings({ ...state.settings, [name]: newSetting });\n\t};\n\n\tconst menuItems = [];\n\n\tfor (const [name, setting] of Object.entries(state.settings)) {\n\t\tmenuItems.push(\n\t\t\t<MenuItem key={name} onClick={() => toggleSetting(name, setting)}>\n\t\t\t\t{setting.value ? <Check /> : <Clear />}&nbsp;&nbsp;{setting.displayName} \n\t\t\t</MenuItem>\n\t\t);\n\t}\n\n\treturn (\n\t\t<SettingsContainer>\n\t\t\t<IconButton aria-controls=\"settings\" aria-haspopup=\"true\" onClick={handleClick} size=\"small\">\n\t\t\t\t<SettingsIcon />\n\t\t\t</IconButton>\n\t\t\t<Menu\n\t\t\t\tid=\"settings\"\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tkeepMounted\n\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\tonClose={handleClose}\n\t\t\t>\n\t\t\t\t{menuItems}\n\t\t\t</Menu>\n\t\t</SettingsContainer>\n\t);\n}","import { Button, TextField } from \"@material-ui/core\";\nimport { Autocomplete } from '@material-ui/lab';\nimport React, { FormEvent, useContext } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport styled from \"styled-components\";\nimport { useChannels } from \"../hooks/useChannels\";\nimport { store } from \"../store\";\nimport { Docs } from \"./Docs\";\nimport { Settings } from \"./Settings\";\n\nconst FiltersContainer = styled.form`\n    display: inline-flex;\n    align-items: center;\n    padding: 15px;\n    background: var(--bg-bright);\n    border-bottom-left-radius: 3px;\n    border-bottom-right-radius: 3px;\n\tmargin: 0 auto;\n    z-index: 99;\n\n    > * {\n        margin-right: 15px !important;    \n\n        &:last-child {\n            margin-right: 0 !important;\n        }\n    }\n`;\n\nconst FiltersWrapper = styled.div`\n    text-align: center;\n`;\n\nexport function Filters() {\n    const { setCurrents, state } = useContext(store);\n    const queryClient = useQueryClient();\n    const channels = useChannels();\n\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (e.target instanceof HTMLFormElement) {\n            const data = new FormData(e.target);\n\n            const channel = data.get(\"channel\") as string | null;\n            const username = data.get(\"username\") as string | null;\n\n            queryClient.invalidateQueries([\"log\", { channel: channel?.toLowerCase(), username: username?.toLowerCase() }]);\n\n            setCurrents(channel, username);\n        }\n    };\n\n    return <FiltersWrapper>\n        <FiltersContainer onSubmit={handleSubmit} action=\"none\">\n            <Autocomplete\n                id=\"autocomplete-channels\"\n                options={channels.map(channel => channel.name)}\n                style={{ width: 225 }}\n                defaultValue={state.currentChannel}\n                getOptionLabel={(channel: string) => channel}\n                clearOnBlur={false}\n                renderInput={(params) => <TextField {...params} name=\"channel\" label=\"channel\" variant=\"filled\" autoFocus={state.currentChannel === null} />}\n            />\n            <TextField error={state.error} name=\"username\" label=\"username\" variant=\"filled\" autoComplete=\"off\" defaultValue={state.currentUsername} autoFocus={state.currentChannel !== null && state.currentUsername === null} />\n            <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\">load</Button>\n            <Settings />\n            <Docs />\n        </FiltersContainer>\n    </FiltersWrapper>\n}","import { useContext } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { store } from \"../store\";\n\nexport interface Channel {\n    userID: string,\n    name: string\n}\n\nexport function useChannels(): Array<Channel> {\n    const { state } = useContext(store);\n\n    const { data } = useQuery<Array<Channel>>(`channels`, () => {\n\n        // const queryUrl = new URL(`http://localhost:8025/channels`);\n        const queryUrl = new URL(`${state.apiBaseUrl}/channels`);\n\n        return fetch(queryUrl.toString()).then((response) => {\n            if (response.ok) {\n                return response;\n            }\n\n            throw Error(response.statusText);\n        }).then(response => response.json())\n            .then((data: { channels: Array<Channel> }) => data.channels);\n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\n\n    return data ?? [];\n}","export class OptOutError extends Error { }","export function isUserId(value: string) {\n    return value.startsWith(\"id:\");\n}\n\nexport function getUserId(value: string) {\n    return value.replace(\"id:\", \"\");\n}","import React from \"react\";\n\nexport function Txt() {\n    return (\n        <svg className={\"txt\"} height={32} viewBox=\"0 0 32 32\" width={32}>\n            <title />\n            <path\n                d=\"M21 26v2.003A1.995 1.995 0 0119.003 30H3.997A2 2 0 012 27.993V5.007C2 3.898 2.9 3 4.009 3H14v6.002c0 1.111.898 1.998 2.006 1.998H21v2h-8.993A3.003 3.003 0 009 15.999V23A2.996 2.996 0 0012.007 26H21zM15 3v5.997c0 .554.451 1.003.99 1.003H21l-6-7zm-3.005 11C10.893 14 10 14.9 10 15.992v7.016A2 2 0 0011.995 25h17.01C30.107 25 31 24.1 31 23.008v-7.016A2 2 0 0029.005 14h-17.01zM14 17v6h1v-6h2v-1h-5v1h2zm6 2.5L18 16h1l1.5 2.625L22 16h1l-2 3.5 2 3.5h-1l-1.5-2.625L19 23h-1l2-3.5zm6-2.5v6h1v-6h2v-1h-5v1h2z\"\n                fill=\"#929292\"\n                fillRule=\"evenodd\"\n            />\n        </svg>\n    );\n}","import { useContext } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getUserId, isUserId } from \"../services/isUserId\";\nimport { store } from \"../store\";\nimport { Emote, LogMessage, UserLogResponse } from \"../types/log\";\nimport runes from \"runes\";\n\n\n\nexport function useLog(channel: string, username: string, year: string, month: string): Array<LogMessage> {\n    const { state } = useContext(store);\n\n    const { data } = useQuery<Array<LogMessage>>([\"log\", { channel: channel, username: username, year: year, month: month }], () => {\n        if (channel && username) {\n            const channelIsId = isUserId(channel);\n            const usernameIsId = isUserId(username);\n\n            if (channelIsId) {\n                channel = getUserId(channel)\n            }\n            if (usernameIsId) {\n                username = getUserId(username)\n            }\n\n            const queryUrl = new URL(`${state.apiBaseUrl}/channel${channelIsId ? \"id\" : \"\"}/${channel}/user${usernameIsId ? \"id\" : \"\"}/${username}/${year}/${month}`);\n            queryUrl.searchParams.append(\"json\", \"1\");\n            if (!state.settings.newOnBottom.value) {\n                queryUrl.searchParams.append(\"reverse\", \"1\");\n            }\n\n            return fetch(queryUrl.toString()).then((response) => {\n                if (response.ok) {\n                    return response;\n                }\n\n                throw Error(response.statusText);\n            }).then(response => response.json()).then((data: UserLogResponse) => {\n                const messages: Array<LogMessage> = [];\n\n                for (const msg of data.messages) {\n                    messages.push({ ...msg, timestamp: new Date(msg.timestamp), emotes: parseEmotes(msg.text, msg.tags[\"emotes\"]) })\n                }\n\n                return messages;\n            });\n        }\n\n        return [];\n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\n\n    return data ?? [];\n}\n\nfunction parseEmotes(messageText: string, emotes: string | undefined): Array<Emote> {\n    const parsed: Array<Emote> = [];\n    if (!emotes) {\n        return parsed;\n    }\n\n    const groups = emotes.split(\"/\");\n\n    for (const group of groups) {\n        const [id, positions] = group.split(\":\");\n        const positionGroups = positions.split(\",\");\n\n        for (const positionGroup of positionGroups) {\n            const [startPos, endPos] = positionGroup.split(\"-\");\n\n            const startIndex = Number(startPos);\n            const endIndex = Number(endPos) + 1;\n            \n            parsed.push({\n                id,\n                startIndex: startIndex,\n                endIndex: endIndex,\n                code: runes.substr(messageText, startIndex, endIndex - startIndex + 1)\n            });\n        }\n    }\n\n    return parsed;\n}","import { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\nimport { use7tvChannelEmotes } from \"./use7tvChannelEmotes\";\nimport { use7tvGlobalEmotes } from \"./use7tvGlobalEmotes\";\nimport { useBttvChannelEmotes } from \"./useBttvChannelEmotes\";\nimport { useBttvGlobalEmotes } from \"./useBttvGlobalEmotes\";\nimport { useFfzChannelEmotes } from \"./useFfzChannelEmotes\";\nimport { useFfzGlobalEmotes } from \"./useFfzGlobalEmotes\";\n\nexport function useThirdPartyEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst thirdPartyEmotes: Array<ThirdPartyEmote> = [\n\t\t...useBttvChannelEmotes(channelId),\n\t\t...useFfzChannelEmotes(channelId),\n\t\t...use7tvChannelEmotes(channelId),\n\t\t...useBttvGlobalEmotes(),\n\t\t...useFfzGlobalEmotes(),\n\t\t...use7tvGlobalEmotes(),\n\t];\n\n\treturn thirdPartyEmotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { BttvChannelEmotesResponse } from \"../types/Bttv\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useBttvChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery([\"bttv:channel\", { channelId: channelId }], () => {\n\t\tif (channelId === \"\") {\n\t\t\treturn Promise.resolve({ sharedEmotes: [], channelEmotes: [] });\n\t\t}\n\n\t\treturn fetch(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`).then(res =>\n\t\t\tres.json() as Promise<BttvChannelEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of [...data?.channelEmotes ?? [], ...data?.sharedEmotes ?? []]) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.code,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { EmoteSet, FfzChannelEmotesResponse } from \"../types/Ffz\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useFfzChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery([\"ffz:channel\", { channelId: channelId }], () => {\n\t\tif (channelId === \"\") {\n\t\t\treturn Promise.resolve({sets: {}});\n\t\t}\n\n\t\treturn fetch(`https://api.frankerfacez.com/v1/room/id/${channelId}`).then(res =>\n\t\t\tres.json() as Promise<FfzChannelEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data?.sets) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const set of Object.values(data.sets) as Array<EmoteSet>) {\n\t\tfor (const channelEmote of set.emoticons) {\n\t\t\temotes.push({\n\t\t\t\tid: String(channelEmote.id),\n\t\t\t\tcode: channelEmote.name,\n\t\t\t\turls: {\n\t\t\t\t\tsmall: channelEmote.urls[\"1\"],\n\t\t\t\t\tmedium: channelEmote.urls[\"2\"],\n\t\t\t\t\tbig: channelEmote.urls[\"4\"],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { StvChannelEmotesResponse } from \"../types/7tv\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function use7tvChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery([\"7tv:channel\", { channelId: channelId }], () => {\n\t\tif (channelId === \"\") {\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\n\t\treturn fetch(`https://api.7tv.app/v2/users/${channelId}/emotes`).then(res => {\n\t\t\tif (res.ok) {\n\t\t\t\treturn res.json() as Promise<StvChannelEmotesResponse>;\n\t\t\t}\n\n\t\t\treturn Promise.reject(res.statusText);\n\t\t});\n\t}, QueryDefaults);\n\n\tif (isLoading) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of data ?? []) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.name,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.7tv.app/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.7tv.app/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.7tv.app/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { BttvGlobalEmotesResponse } from \"../types/Bttv\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useBttvGlobalEmotes(): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(\"bttv:global\", () => {\n\t\treturn fetch(\"https://api.betterttv.net/3/cached/emotes/global\").then(res =>\n\t\t\tres.json() as Promise<BttvGlobalEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of data) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.code,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { EmoteSet, FfzGlobalEmotesResponse } from \"../types/Ffz\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useFfzGlobalEmotes(): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(\"ffz:global\", () => {\n\t\treturn fetch(\"https://api.frankerfacez.com/v1/set/global\").then(res =>\n\t\t\tres.json() as Promise<FfzGlobalEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data?.sets) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const set of Object.values(data.sets) as Array<EmoteSet>) {\n\t\tfor (const channelEmote of set.emoticons) {\n\t\t\temotes.push({\n\t\t\t\tid: String(channelEmote.id),\n\t\t\t\tcode: channelEmote.name,\n\t\t\t\turls: {\n\t\t\t\t\tsmall: channelEmote.urls[\"1\"],\n\t\t\t\t\tmedium: channelEmote.urls[\"2\"],\n\t\t\t\t\tbig: channelEmote.urls[\"4\"],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { StvGlobalEmotesResponse } from \"../types/7tv\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function use7tvGlobalEmotes(): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(\"7tv:global\", () => {\n\t\treturn fetch(\"https://api.7tv.app/v2/emotes/global\").then(res => {\n\t\t\tif (res.ok) {\n\t\t\t\treturn res.json() as Promise<StvGlobalEmotesResponse>;\n\t\t\t}\n\n\t\t\treturn Promise.reject(res.statusText);\n\t\t});\n\t}, QueryDefaults);\n\n\tif (isLoading || !data) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of data ?? []) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.name,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.7tv.app/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.7tv.app/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.7tv.app/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import React, { useContext } from \"react\";\nimport Linkify from \"react-linkify\";\nimport styled from \"styled-components\";\nimport { store } from \"../store\";\nimport { LogMessage } from \"../types/log\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\nimport runes from \"runes\";\n\nconst MessageContainer = styled.div`\n\n\ta {\n\t\tmargin: 0 2px;\n\t\tcolor: var(--theme2);\n\t\ttext-decoration: none;\n\n\t\t&:hover, &:active, &:focus {\n\t\t\tcolor: var(--theme2-bright);\n\t\t}\n\t}\n`;\n\nconst Emote = styled.img`\n\tmax-height: 18px;\n\tmargin: 0 2px;\n\tmargin-bottom: -2px;\n\twidth: auto;\n`;\n\nexport function Message({ message, thirdPartyEmotes }: { message: LogMessage, thirdPartyEmotes: Array<ThirdPartyEmote> }): JSX.Element {\n\tconst { state } = useContext(store);\n\tconst renderMessage = [];\n\n\tlet replaced;\n\tlet buffer = \"\";\n\n\tlet messageText = message.text;\n\tlet renderMessagePrefix = \"\";\n\tif (message.tags['system-msg']) {\n\t\tmessageText = messageText.replace(message.tags['system-msg'] + \" \", \"\");\n\n\t\trenderMessagePrefix = `${message.tags['system-msg']} `;\n\t}\n\n\tconst messageTextEmoji = runes(messageText);\n\n\tfor (let x = 0; x <= messageTextEmoji.length; x++) {\n\t\tconst c = messageTextEmoji[x];\n\n\t\treplaced = false;\n\n\t\tif (state.settings.showEmotes.value) {\n\t\t\tfor (const emote of message.emotes) {\n\t\t\t\tif (emote.startIndex === x) {\n\t\t\t\t\treplaced = true;\n\t\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\t\tclassName=\"emote\"\n\t\t\t\t\t\tkey={x}\n\t\t\t\t\t\talt={emote.code}\n\t\t\t\t\t\tsrc={`https://static-cdn.jtvnw.net/emoticons/v2/${emote.id}/default/dark/1.0`}\n\t\t\t\t\t/>);\n\t\t\t\t\tx += emote.endIndex - emote.startIndex - 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!replaced) {\n\t\t\tif (c !== \" \" && x !== messageTextEmoji.length) {\n\t\t\t\tbuffer += c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet emoteFound = false;\n\n\t\t\tfor (const emote of thirdPartyEmotes) {\n\t\t\t\tif (buffer.trim() === emote.code) {\n\t\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\t\tclassName=\"emote\"\n\t\t\t\t\t\tkey={x}\n\t\t\t\t\t\talt={emote.code}\n\t\t\t\t\t\tsrc={emote.urls.small}\n\t\t\t\t\t/>);\n\t\t\t\t\temoteFound = true;\n\t\t\t\t\tbuffer = \"\";\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!emoteFound) {\n\t\t\t\trenderMessage.push(<Linkify key={x} componentDecorator={(decoratedHref, decoratedText, key) => (\n\t\t\t\t\t<a target=\"__blank\" href={decoratedHref} key={key}>\n\t\t\t\t\t\t{decoratedText}\n\t\t\t\t\t</a>\n\t\t\t\t)}>{buffer}</Linkify>);\n\t\t\t\tbuffer = \"\";\n\t\t\t}\n\n\t\t\tif (c === \" \" && !state.settings.twitchChatMode.value) {\n\t\t\t\trenderMessage.push(<>&nbsp;</>);\n\t\t\t} else {\n\t\t\t\trenderMessage.push(c);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn <MessageContainer className=\"message\">\n\t\t{renderMessagePrefix}{renderMessage}\n\t</MessageContainer>;\n};","import React from \"react\";\nimport styled from \"styled-components\";\n\n\n\nconst UserContainer = styled.div.attrs(props => ({\n\tstyle: {\n\t\tcolor: props.color,\n\t}\n}))`\n\tdisplay: inline;\n`;\n\nexport function User({ displayName, color }: { displayName: string, color: string }): JSX.Element {\n\t\n\tconst renderColor = color !== \"\" ? color : \"grey\";\n\n\treturn <UserContainer color={renderColor} className=\"user\">\n\t\t{displayName}:\n\t</UserContainer>;\n}","import dayjs from \"dayjs\";\nimport React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useThirdPartyEmotes } from \"../hooks/useThirdPartyEmotes\";\nimport { store } from \"../store\";\nimport { LogMessage } from \"../types/log\";\nimport { Message } from \"./Message\";\nimport { User } from \"./User\";\nimport utc from \"dayjs/plugin/utc\";\nimport timezone from \"dayjs/plugin/timezone\";\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\ndayjs.tz.guess()\n\nconst LogLineContainer = styled.li`\n\tdisplay: flex;\n\talign-items: flex-start;\n    margin-bottom: 1px;\n\n    .timestamp {\n        color: var(--text-dark);\n        user-select: none;\n        font-family: monospace;\n        white-space: nowrap;\n        line-height: 1.1rem;\n    }\n\n    .user {\n        margin-left: 5px;\n        user-select: none;\n        font-weight: bold;\n        line-height: 1.1rem;\n    }\n\n    .message {\n        margin-left: 5px;\n        line-height: 1.1rem;\n    }\n`;\n\nexport function LogLine({ message }: { message: LogMessage }) {\n    const { state } = useContext(store);\n\n    if (state.settings.showEmotes.value) {\n        return <LogLineWithEmotes message={message} />;\n    }\n\n    return <LogLineContainer className=\"logLine\">\n        {state.settings.showTimestamp.value &&<span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\n        <Message message={message} thirdPartyEmotes={[]} />\n    </LogLineContainer>\n}\n\nexport function LogLineWithEmotes({ message }: { message: LogMessage }) {\n    const thirdPartyEmotes = useThirdPartyEmotes(message.tags[\"room-id\"])\n    const { state } = useContext(store);\n\n    return <LogLineContainer className=\"logLine\">\n        {state.settings.showTimestamp.value &&<span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\n        <Message message={message} thirdPartyEmotes={thirdPartyEmotes} />\n    </LogLineContainer>\n}","import { InputAdornment, TextField } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\nimport React, { useContext, useState, CSSProperties, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLog } from \"../hooks/useLog\";\nimport { store } from \"../store\";\nimport { LogLine } from \"./LogLine\";\nimport { FixedSizeList as List } from 'react-window';\n\nconst ContentLogContainer = styled.ul`\n    padding: 0;\n    margin: 0;\n    position: relative;\n\n    .search {\n        position: absolute;\n        top: -52px;\n        width: 320px;\n        left: 0;\n    }\n\n    .logLine {\n        white-space: nowrap;\n    }\n\n    .list {\n        scrollbar-color: dark;\n    }\n`;\n\nexport function ContentLog({ year, month }: { year: string, month: string }) {\n    const { state, setState } = useContext(store);\n    const [searchText, setSearchText] = useState(\"\");\n\n    const logs = useLog(state.currentChannel ?? \"\", state.currentUsername ?? \"\", year, month)\n        .filter(log => log.text.toLowerCase().includes(searchText.toLowerCase()));\n\n    const Row = ({ index, style }: { index: number, style: CSSProperties }) => (\n        <div style={style}><LogLine key={logs[index].id ? logs[index].id : index} message={logs[index]} /></div>\n    );\n\n    const search = useRef<HTMLInputElement>(null);\n\n    const handleMouseEnter = () => {\n        setState({ ...state, activeSearchField: search.current })\n    }\n\n    useEffect(() => {\n        setState({ ...state, activeSearchField: search.current })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <ContentLogContainer onMouseEnter={handleMouseEnter}>\n        <TextField\n            className=\"search\"\n            label=\"Search\"\n            inputRef={search}\n            onChange={e => setSearchText(e.target.value)}\n            size=\"small\"\n            InputProps={{\n                startAdornment: (\n                    <InputAdornment position=\"start\">\n                        <Search />\n                    </InputAdornment>\n                ),\n            }}\n        />\n        <List\n            className=\"list\"\n            height={600}\n            itemCount={logs.length}\n            itemSize={20}\n            width={\"100%\"}\n        >\n            {Row}\n        </List>\n    </ContentLogContainer>\n}","import dayjs from \"dayjs\";\nimport React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useThirdPartyEmotes } from \"../hooks/useThirdPartyEmotes\";\nimport { store } from \"../store\";\nimport { LogMessage } from \"../types/log\";\nimport { Message } from \"./Message\";\nimport { User } from \"./User\";\nimport utc from \"dayjs/plugin/utc\";\nimport timezone from \"dayjs/plugin/timezone\";\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\ndayjs.tz.guess()\n\nconst TwitchChatLogLineContainer = styled.li`\n\talign-items: flex-start;\n    margin-bottom: 1px;\n    padding: 5px 20px;\n\n    .timestamp {\n        color: var(--text-dark);\n        user-select: none;\n        font-family: monospace;\n        white-space: nowrap;\n        margin-right: 5px;\n        line-height: 1.1rem;\n    }\n\n    .user {\n        display: inline-block;\n        margin-right: 5px;\n        user-select: none;\n        font-weight: bold;\n        line-height: 1.1rem;\n    }\n\n    .message {\n        display: inline;\n        line-height: 20px;\n\n        a {\n            word-wrap: break-word;\n        }\n\n        .emote {\n            max-height: 28px;\n            margin: 0 2px;\n            margin-bottom: -10px;\n            width: auto;\n        }\n    }\n`;\n\nexport function TwitchChatLogLine({ message }: { message: LogMessage }) {\n    const { state } = useContext(store);\n\n    if (state.settings.showEmotes.value) {\n        return <LogLineWithEmotes message={message} />;\n    }\n\n    return <TwitchChatLogLineContainer className=\"logLine\">\n        {state.settings.showTimestamp.value && <span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\n        <Message message={message} thirdPartyEmotes={[]} />\n    </TwitchChatLogLineContainer>\n}\n\nfunction LogLineWithEmotes({ message }: { message: LogMessage }) {\n    const thirdPartyEmotes = useThirdPartyEmotes(message.tags[\"room-id\"])\n    const { state } = useContext(store);\n\n    return <TwitchChatLogLineContainer className=\"logLine\">\n        {state.settings.showTimestamp.value && <span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\n        <Message message={message} thirdPartyEmotes={thirdPartyEmotes} />\n    </TwitchChatLogLineContainer>\n}","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useLog } from \"../hooks/useLog\";\nimport { store } from \"../store\";\nimport { TwitchChatLogLine } from \"./TwitchChatLogLine\";\n\nconst ContentLogContainer = styled.ul`\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    width: 340px;\n`;\n\nexport function TwitchChatContentLog({ year, month }: { year: string, month: string }) {\n    const { state } = useContext(store);\n\n    const logs = useLog(state.currentChannel ?? \"\", state.currentUsername ?? \"\", year, month)\n\n    return <ContentLogContainer>\n        {logs.map((log, index) => <TwitchChatLogLine key={log.id ? log.id : index} message={log} />)}\n    </ContentLogContainer>\n}","import { Button } from \"@material-ui/core\";\nimport React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Txt } from \"../icons/Txt\";\nimport { getUserId, isUserId } from \"../services/isUserId\";\nimport { store } from \"../store\";\nimport { ContentLog } from \"./ContentLog\";\nimport { TwitchChatContentLog } from \"./TwitchChatLogContainer\";\n\nconst LogContainer = styled.div`\n    position: relative;\n    background: var(--bg-bright);\n    border-radius: 3px;\n    padding: 0.5rem;\n    margin-top: 3rem;\n\n    .txt {\n        position: absolute;\n        top: 5px;\n        right: 15px;\n        opacity: 0.9;\n        cursor: pointer;\n        z-index: 999;\n\n        &:hover {\n            opacity: 1;\n        }\n    }\n`;\n\nexport function Log({ year, month, initialLoad = false }: { year: string, month: string, initialLoad?: boolean }) {\n    const { state } = useContext(store);\n    const [load, setLoad] = useState(initialLoad);\n\n    if (!load) {\n        return <LogContainer>\n            <LoadableLog year={year} month={month} onLoad={() => setLoad(true)} />\n        </LogContainer>\n    }\n\n    let txtHref = `${state.apiBaseUrl}`\n    if (state.currentChannel && isUserId(state.currentChannel)) {\n        txtHref += `/channelid/${getUserId(state.currentChannel)}`\n    } else {\n        txtHref += `/channel/${state.currentChannel}`\n    }\n\n    if (state.currentUsername && isUserId(state.currentUsername)) {\n        txtHref += `/userid/${getUserId(state.currentUsername)}`\n    } else {\n        txtHref += `/user/${state.currentUsername}`\n    }\n\n    txtHref += `/${year}/${month}?reverse`;\n\n    return <LogContainer>\n        <a className=\"txt\" target=\"__blank\" href={txtHref} rel=\"noopener noreferrer\"><Txt /></a>\n        {!state.settings.twitchChatMode.value && <ContentLog year={year} month={month} />}\n        {state.settings.twitchChatMode.value && <TwitchChatContentLog year={year} month={month} />}\n    </LogContainer>\n}\n\nconst LoadableLogContainer = styled.div`\n\n`;\n\nfunction LoadableLog({ year, month, onLoad }: { year: string, month: string, onLoad: () => void }) {\n    return <LoadableLogContainer>\n        <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={onLoad}>load {year}/{month}</Button>\n    </LoadableLogContainer>\n}","import styled from \"styled-components\";\nimport React from \"react\";\n\nconst OptOutContainer = styled.div`\n    display: block;\n    font-weight: bold;\n    color: var(--danger);\n    font-size: 2rem;\n    text-align: center;\n    padding: 2rem;\n`;\n\nexport function OptOutMessage() {\n    return <OptOutContainer>User or channel has opted out</OptOutContainer>\n}","import React, { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { OptOutError } from \"../errors/OptOutError\";\nimport { useAvailableLogs } from \"../hooks/useAvailableLogs\";\nimport { store } from \"../store\";\nimport { Log } from \"./Log\";\nimport { OptOutMessage } from \"./OptOutMessage\";\n\nconst LogContainerDiv = styled.div`\n    color: white;\n    padding: 2rem;\n    padding-top: 0;\n    width: 100%;\n`;\n\nexport function LogContainer() {\n    const { state } = useContext(store);\n\n    const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    const ctrlKey = isMac ? \"metaKey\" : \"ctrlKey\";\n\n    useEffect(() => {\n        const listener = function (e: KeyboardEvent) {\n            if (e.key === 'f' && e[ctrlKey] && !state.settings.twitchChatMode.value) {\n                e.preventDefault();\n                if (state.activeSearchField) {\n                    state.activeSearchField.focus();\n                }\n            }\n        };\n\n        window.addEventListener(\"keydown\", listener)\n\n        return () => window.removeEventListener(\"keydown\", listener);\n    }, [state.activeSearchField, state.settings.twitchChatMode.value, ctrlKey]);\n\n    const [availableLogs, err] = useAvailableLogs(state.currentChannel, state.currentUsername);\n    if (err instanceof OptOutError) {\n        return <OptOutMessage />;\n    }\n\n    return <LogContainerDiv>\n        {availableLogs.map((log, index) => <Log key={`${log.year}:${log.month}`} year={log.year} month={log.month} initialLoad={index === 0} />)}\n    </LogContainerDiv>\n}","import { useContext } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { OptOutError } from \"../errors/OptOutError\";\nimport { getUserId, isUserId } from \"../services/isUserId\";\nimport { store } from \"../store\";\n\nexport type AvailableLogs = Array<{ month: string, year: string }>;\n\nexport function useAvailableLogs(channel: string | null, username: string | null): [AvailableLogs, Error | undefined] {\n    const { state, setState } = useContext(store);\n\n    // @ts-ignore I don't understand this error :)\n    const { data } = useQuery<[AvailableLogs, Error | undefined]>([\"availableLogs\", { channel: channel, username: username }], () => {\n        if (!channel || !username) {\n            return Promise.resolve([[], undefined]);\n        }\n\n        const channelIsId = isUserId(channel);\n        const usernameIsId = isUserId(username);\n\n        if (channelIsId) {\n            channel = getUserId(channel)\n        }\n        if (usernameIsId) {\n            username = getUserId(username)\n        }\n\n        const queryUrl = new URL(`${state.apiBaseUrl}/list`);\n        queryUrl.searchParams.append(`channel${channelIsId ? \"id\" : \"\"}`, channel);\n        queryUrl.searchParams.append(`user${usernameIsId ? \"id\" : \"\"}`, username);\n\n        return fetch(queryUrl.toString()).then((response) => {\n            if (response.ok) {\n                return response;\n            }\n\n            setState({ ...state, error: true });\n\n            if (response.status === 403) {\n                throw new OptOutError();\n            }\n\n            throw Error(response.statusText);\n        }).then(response => response.json())\n            .then((data: { availableLogs: AvailableLogs }) => [data.availableLogs, undefined])\n            .catch((err) => {\n                return [[], err];\n            });        \n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\n\n    return data as [AvailableLogs, Error | undefined] | undefined ?? [[], undefined];\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Filters } from \"./Filters\";\nimport { LogContainer } from \"./LogContainer\";\n\nconst PageContainer = styled.div`\n\t\n`;\n\nexport function Page() {\n\treturn <PageContainer>\n\t\t<Filters />\n\t\t<LogContainer />\n\t</PageContainer>;\n}","import React from 'react';\nimport { useContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClientProvider } from 'react-query';\nimport { Page } from './components/Page';\nimport { StateProvider, store } from './store';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nconst pageTheme = createMuiTheme({\n\tpalette: {\n\t\ttype: 'dark'\n\t},\n});\n\nfunction App() {\n\tconst { state } = useContext(store);\n\n\treturn <QueryClientProvider client={state.queryClient}>\n\t\t<Page />\n\t</QueryClientProvider>\n}\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<StateProvider>\n\t\t\t<ThemeProvider theme={pageTheme}>\n\t\t\t\t<App />\n\t\t\t</ThemeProvider>\n\t\t</StateProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}